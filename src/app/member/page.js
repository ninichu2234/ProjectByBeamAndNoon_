"use client";

import { useState, useEffect } from 'react';
import { supabase } from '../lib/supabaseClient';
import Link from 'next/link';
import NextImage from 'next/image';

// --- (‡∏™‡πà‡∏ß‡∏ô MemberDashboard ‡πÅ‡∏•‡∏∞ GuestLandingPage ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏° ‡πÅ‡∏ï‡πà MemberDashboard ‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏±‡∏ö props ‡πÄ‡∏û‡∏¥‡πà‡∏°) ---
// ‚ÄºÔ∏è [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] MemberDashboard ‡∏£‡∏±‡∏ö props orders ‡πÄ‡∏û‡∏¥‡πà‡∏° ‚ÄºÔ∏è
const MemberDashboard = ({ user, profile, orders, onLogout }) => { 
    // ... (‡πÇ‡∏Ñ‡πâ‡∏î‡πÅ‡∏™‡∏î‡∏á profile, ‡∏õ‡∏∏‡πà‡∏° logout ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ...

    return (
        <div className="container mx-auto max-w-4xl p-4 md:p-8">
            {/* ... (‡∏™‡πà‡∏ß‡∏ô header ‡πÅ‡∏•‡∏∞ aside ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ... */}
            <header className="mb-8 flex justify-between items-center">
                 <h1 className="text-3xl md:text-4xl font-extrabold text-gray-800">
                    Hello, <span className="text-amber-600">{profile?.fullName || user.email}!</span>
                 </h1>
                 <button onClick={onLogout} className="text-sm text-red-600 hover:text-red-800 font-semibold py-2 px-4 rounded-lg bg-red-100 hover:bg-red-200">
                    Log Out
                 </button>
            </header>
             <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
                 <aside className="md:col-span-1 space-y-6">
                    <div className="bg-white p-6 rounded-lg shadow-md text-center">
                        <h2 className="text-xl font-bold text-gray-800 mb-4">Loyalty Points</h2>
                        <p className="text-5xl font-bold text-amber-500">
                            ‚≠ê {profile?.loyaltyPoints || 0}
                        </p>
                        <p className="text-gray-500 mt-1">Point</p>
                    </div>
                 </aside>

            {/* --- ‡∏™‡πà‡∏ß‡∏ô Main ‡πÅ‡∏™‡∏î‡∏á Order History --- */}
            <main className="md:col-span-2">
                <div className="bg-white p-6 rounded-lg shadow-md">
                    <h2 className="text-2xl font-bold text-gray-800 mb-5">Order History</h2>
                    <div className="space-y-4">
                        {/* ‚ÄºÔ∏è [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡πÄ‡∏ä‡πá‡∏Ñ orders.length ‡πÅ‡∏•‡∏∞ map ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á ‚ÄºÔ∏è */}
                        {orders.length === 0 ? (
                            <p className="text-gray-500 text-center py-4">No order history yet.</p>
                        ) : (
                            orders.map((order) => (
                                <div key={order.orderId} className="border border-gray-200 rounded-lg p-4 flex flex-col sm:flex-row justify-between items-start sm:items-center">
                                    <div>
                                        <p className="font-bold text-gray-800">
                                            #{order.orderId} -{' '}
                                            <span className="font-normal text-gray-500">
                                                {new Date(order.orderDateTime).toLocaleDateString('th-TH', {
                                                    year: 'numeric', month: 'short', day: 'numeric', hour: '2-digit', minute: '2-digit'
                                                })}
                                            </span>
                                        </p>
                                        <p className="text-gray-600 text-sm mt-1">
                                            Status: {order.orderStatus} ({order.paymentStatus})
                                        </p>
                                        {/* (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ‡∏ï‡πâ‡∏≠‡∏á‡∏î‡∏∂‡∏á orderDetails ‡∏°‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°) */}
                                    </div>
                                    <div className="mt-3 sm:mt-0 text-right">
                                        <p className="font-bold text-lg text-amber-600">{order.totalPrice ? `${parseFloat(order.totalPrice).toFixed(2)} ‡∏ø` : '-'}</p>
                                    </div>
                                </div>
                            ))
                        )}
                    </div>
                </div>
            </main>
          </div>
        </div>
    );
};

const GuestLandingPage = ({ onLogin }) => {
    // ... (‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ...
     return (
        <div className="container mx-auto max-w-3xl p-4 md:p-8 text-center">
            <h1 className="text-3xl md:text-5xl font-extrabold text-gray-800 mb-4">
                Join MyCafe for Free!
            </h1>
            <p className="text-lg text-gray-600 mb-8">
                Collect points from every order to redeem drinks and special privileges.
            </p>
            <div className="mb-8 max-w-md mx-auto"> 
                <NextImage
                    src="https://rcrntadwwvhyojmjrmzh.supabase.co/storage/v1/object/public/pic-other/Promotion-member.png" 
                    alt="MyCafe Rewards Program"
                    width={900}  
                    height={1200} 
                    className="w-full h-auto rounded-xl shadow-lg" 
                    priority 
                />
            </div>
            <button onClick={onLogin} className="w-full max-w-sm bg-blue-600 hover:bg-blue-700 text-white text-lg font-bold py-4 px-6 rounded-lg shadow-lg transition-transform transform hover:scale-105">
                Sign Up / Log In with Google
            </button>
            <p className="text-gray-500 text-sm mt-4">Sign up easily in 10 seconds. No password required.</p>
        </div>
    );
};
// --- (‡∏à‡∏ö‡∏™‡πà‡∏ß‡∏ô Component ‡∏¢‡πà‡∏≠‡∏¢) ---


// --- ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 3: Component ‡∏´‡∏•‡∏±‡∏Å (‡∏ï‡∏±‡∏ß‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°) ---
export default function MemberPage() {
    const [session, setSession] = useState(null);
    const [profile, setProfile] = useState(null);
    // ‚ÄºÔ∏è [‡πÄ‡∏û‡∏¥‡πà‡∏°] State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö Order History ‚ÄºÔ∏è
    const [orders, setOrders] = useState([]);
    const [loading, setLoading] = useState(true);

    useEffect(() => {
        // (‡∏™‡πà‡∏ß‡∏ô fetchSession ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏° ‡πÅ‡∏ï‡πà‡∏à‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å fetchOrders ‡∏î‡πâ‡∏ß‡∏¢)
        const fetchSessionAndData = async () => {
            try {
                console.log("MemberPage: ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö session...");
                const { data: { session } } = await supabase.auth.getSession();
                setSession(session);
                if (session) {
                    console.log("MemberPage: ‚úÖ ‡πÄ‡∏à‡∏≠ Session!", session.user.id);
                    // ‚ÄºÔ∏è [‡πÄ‡∏û‡∏¥‡πà‡∏°] ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ó‡∏±‡πâ‡∏á fetchProfile ‡πÅ‡∏•‡∏∞ fetchOrders ‚ÄºÔ∏è
                    await Promise.all([
                        fetchProfile(session.user),
                        fetchOrders(session.user) // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á Orders
                    ]);
                } else {
                    console.log("MemberPage: ‚õîÔ∏è ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ Session (null)");
                    setOrders([]); // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå orders ‡∏ñ‡πâ‡∏≤ logout
                }
            } catch (error) {
                console.error("MemberPage: ‚õîÔ∏è ‡πÄ‡∏Å‡∏¥‡∏î Error ‡πÉ‡∏ô fetchSessionAndData:", error);
            } finally {
                console.log("MemberPage: üèÅ fetchSessionAndData ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô, setLoading(false)");
                setLoading(false);
            }
        };

        fetchSessionAndData();

        // (‡∏™‡πà‡∏ß‡∏ô onAuthStateChange ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏° ‡πÅ‡∏ï‡πà‡∏à‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å fetchOrders ‡∏î‡πâ‡∏ß‡∏¢)
        const { data: authListener } = supabase.auth.onAuthStateChange(
            async (_event, session) => {
                console.log("MemberPage: üîÑ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Auth ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á!", session);
                setSession(session);
                if (session) {
                    setLoading(true);
                    try {
                        // ‚ÄºÔ∏è [‡πÄ‡∏û‡∏¥‡πà‡∏°] ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ó‡∏±‡πâ‡∏á fetchProfile ‡πÅ‡∏•‡∏∞ fetchOrders ‚ÄºÔ∏è
                         await Promise.all([
                             fetchProfile(session.user),
                             fetchOrders(session.user) // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á Orders
                         ]);
                    } catch (error) {
                        console.error("MemberPage: ‚õîÔ∏è Error ‡∏ï‡∏≠‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô onAuthStateChange", error);
                    } finally {
                        setLoading(false);
                    }
                } else {
                    setProfile(null);
                    setOrders([]); // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå orders ‡∏ñ‡πâ‡∏≤ logout
                }
            }
        );
        return () => {
            authListener?.subscription.unsubscribe();
        };
    }, []);

    // (‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô fetchProfile ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
    const fetchProfile = async (user) => {
        try {
            console.log("MemberPage: ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á Profile ‡∏Ç‡∏≠‡∏á user...", user.id);
            const { data, error } = await supabase
                .from('profiles')
                .select('*')
                .eq('id', user.id)
                .single();
            if (error && error.code !== 'PGRST116') throw error; // ‡πÇ‡∏¢‡∏ô error ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÅ‡∏ñ‡∏ß"
            if (data) {
                console.log("MemberPage: ‚úÖ ‡πÄ‡∏à‡∏≠ Profile!", data);
                setProfile(data);
            } else {
                console.log("MemberPage: ‚õîÔ∏è ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ Profile (data is null)");
                setProfile(null); // ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πá‡∏ô null ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏à‡∏£‡∏¥‡∏á‡πÜ
            }
        } catch (error) {
            console.error('MemberPage: ‚õîÔ∏è Error fetching profile:', error.message);
            setProfile(null); // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ error ‡πÇ‡∏î‡∏¢‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πá‡∏ô null
        }
    };

    // ‚ÄºÔ∏è [‡πÄ‡∏û‡∏¥‡πà‡∏°] ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á Order History ‚ÄºÔ∏è
    const fetchOrders = async (user) => {
        try {
            console.log("MemberPage: ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á Orders ‡∏Ç‡∏≠‡∏á user...", user.id);
            const { data, error } = await supabase
                .from('order') // ‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏≤‡∏£‡∏≤‡∏á order
                .select('*') // ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
                .eq('userId', user.id) // ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡∏≠‡∏á user ‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ
                .order('orderDateTime', { ascending: false }); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡πÉ‡∏´‡∏°‡πà‡∏™‡∏∏‡∏î

            if (error) throw error;

            console.log("MemberPage: ‚úÖ ‡πÄ‡∏à‡∏≠ Orders!", data);
            setOrders(data || []); // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ state (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô array ‡∏ß‡πà‡∏≤‡∏á)

        } catch (error) {
            console.error('MemberPage: ‚õîÔ∏è Error fetching orders:', error.message);
            setOrders([]); // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ error ‡πÇ‡∏î‡∏¢‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πá‡∏ô array ‡∏ß‡πà‡∏≤‡∏á
        }
    };

    // (‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô handleLogin ‡πÅ‡∏•‡∏∞ handleLogout ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
    const handleLogin = async () => {
        // ... (‡πÇ‡∏Ñ‡πâ‡∏î login) ...
        console.log("MemberPage: ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏î‡πâ‡∏ß‡∏¢ Google...");
        await supabase.auth.signInWithOAuth({
            provider: 'google',
            options: {
                redirectTo: `${window.location.origin}/member`,
            },
        });
    };
    const handleLogout = async () => {
        // ... (‡πÇ‡∏Ñ‡πâ‡∏î logout) ...
        console.log("MemberPage: ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡πá‡∏≠‡∏Å‡πÄ‡∏≠‡∏≤‡∏ó‡πå...");
        await supabase.auth.signOut();
        // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á setProfile/setOrders ‡πÄ‡∏õ‡πá‡∏ô null ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ onAuthStateChange ‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ
    };

    // (‡∏™‡πà‡∏ß‡∏ô return ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏° ‡πÅ‡∏ï‡πà‡∏™‡πà‡∏á props orders ‡πÄ‡∏û‡∏¥‡πà‡∏°)
    if (loading) {
        return (
            <div className="flex justify-center items-center min-h-screen">
                <p className="text-lg">Checking status...</p>
            </div>
        );
    }
    return (
        <div className="bg-gray-50 min-h-screen py-8">
            {session && profile ? (
                // ‚ÄºÔ∏è [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡∏™‡πà‡∏á props orders ‡πÉ‡∏´‡πâ MemberDashboard ‚ÄºÔ∏è
                <MemberDashboard user={session.user} profile={profile} orders={orders} onLogout={handleLogout} />
            ) : (
                <GuestLandingPage onLogin={handleLogin} />
            )}
        </div>
    );
}